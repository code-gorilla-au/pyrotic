package engine

import (
	"bufio"
	"bytes"
	"fmt"
	"log"
	"os"
	"strings"
	"text/template"

	"github.com/code-gorilla-au/pyrotic/internal/formats"
)

func New(dirPath string, fileSuffix string) (Core, error) {
	tmp, err := withTemplates(template.New("root"), fileSuffix, dirPath)
	if err != nil {
		return Core{}, err
	}
	tmp = withFuncs(tmp)
	return Core{
		root: tmp,
	}, nil
}

func (c *Core) Generate(data Data) ([]byte, error) {
	var buf bytes.Buffer
	wr := bufio.NewWriter(&buf)
	if _, err := wr.WriteString("// Code generated by pyrotic DO NOT EDIT.\n"); err != nil {
		log.Println("error writing ", err)
	}
	tmp := c.root.Templates()
	for _, t := range tmp {
		if err := t.Execute(wr, &data); err != nil {
			log.Println("error generating template ", t.Name())
		}
	}
	if err := wr.Flush(); err != nil {
		log.Println("error flushing writer ", err)
	}
	return buf.Bytes(), nil
}

// withTemplates - load templates by file path
func withTemplates(root *template.Template, fileSuffix string, dirPath string) (*template.Template, error) {

	files, err := os.ReadDir(dirPath)
	if err != nil {
		return root, err
	}
	var allFiles []string
	for _, file := range files {
		filename := file.Name()
		fileLocation := fmt.Sprintf("%s/%s", dirPath, filename)
		if strings.HasSuffix(filename, fileSuffix) {
			allFiles = append(allFiles, fileLocation)
		}
	}
	root, err = root.ParseFiles(allFiles...)
	if err != nil {
		return root, err
	}
	return root, nil
}

const (
	caseSnake  = "caseSnake"
	caseKebab  = "caseKebab"
	casePascal = "casePascal"
)

func withFuncs(root *template.Template) *template.Template {
	return root.Funcs(template.FuncMap{
		caseSnake:  formats.CaseSnake,
		caseKebab:  formats.CaseKebab,
		casePascal: formats.CasePascal,
	})
}
